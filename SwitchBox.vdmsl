module SwitchBox
exports all
definitions
types
    PortState = <OFF> | <POWER_IN> | <POWER_OUT>;
    
    Port = <PORT_A> | <PORT_B> | <PORT_C> | <PORT_D>;
values
    ALL_PORTS : set1 of Port =
        {<PORT_A>, <PORT_B>, <PORT_C>, <PORT_D>};
functions
    everyPortHasState : SwitchBox -> bool
    everyPortHasState(mk_SwitchBox(ps, -)) == dom ps = ALL_PORTS;
    
    connectionsPartitionPorts : SwitchBox -> bool
    connectionsPartitionPorts(mk_SwitchBox(-, cs)) ==
        dunion cs = ALL_PORTS
        and (forall c in set cs & dunion (cs \ {c}) inter c = {});
    
    noMultiplePowerIn : SwitchBox -> bool
    noMultiplePowerIn(mk_SwitchBox(ps, cs)) ==
        forall c in set cs &
            card {p | p in set c & ps(p) = <POWER_IN>} <= 1;
    
    powerSuppliedIfAvaiable : SwitchBox -> bool
    powerSuppliedIfAvaiable(mk_SwitchBox(ps, cs)) ==
        (exists p in set ALL_PORTS & ps(p) = <POWER_IN>)
        => (forall c in set cs &
                rng ((c <: ps) :> {<POWER_IN>, <POWER_OUT>}) <> {<POWER_OUT>});
state SwitchBox of
    ports : map Port to PortState
    connections : set of (set1 of Port)
inv switchbox ==
    (everyPortHasState(switchbox) and connectionsPartitionPorts(switchbox))
    and (noMultiplePowerIn(switchbox) and powerSuppliedIfAvaiable(switchbox))
init s ==
    s
    = mk_SwitchBox({p |-> <OFF> | p in set ALL_PORTS}, {{p} | p in set ALL_PORTS})
end
operations
    setPort_unsafe : Port * PortState ==> ()
    setPort_unsafe(port, port_state) == ports(port) := port_state
    post  ports = ports~ ++ {port |-> port_state};
    
    setPort : Port * PortState ==> ()
    setPort(port, port_state) ==
        cases port_state:
            <OFF> -> setOff(port),
            <POWER_OUT> -> setPowerOut(port),
            <POWER_IN> -> setPowerIn(port)
            end
    post  ports = ports~ ++ {port |-> port_state};
    
    setOff : Port ==> ()
    setOff(port) ==
        cases ports(port):
            <OFF> -> skip,
            <POWER_OUT> -> ports(port) := <OFF>,
            <POWER_IN> ->
                let
                    other_connections =
                        {c \ {port} | c in set connections & c <> {port}},
                    orphans = portsWithoutPower(ports, other_connections),
                    foster = findConnectionWithPower(ports, other_connections)
                in
                    if
                        orphans = {} or foster = nil
                    then
                        ports(port) := <OFF>
                    else
                        atomic(
                            ports(port) := <OFF>;
                            connections
                                := (withoutEmpty({c \ orphans | c in set other_connections \ {foster}})
                                    union {foster union orphans})
                                union {{port}})
            end
    post  ports = ports~ ++ {port |-> <OFF>};
    
    setPowerOut : Port ==> ()
    setPowerOut(port) ==
        cases ports(port):
            <OFF> ->
                let foster = findConnectionWithPower(ports, connections)
                in
                    if
                        foster = nil
                    then
                        ports(port) := <POWER_OUT>
                    else
                        atomic(
                            ports(port) := <POWER_OUT>;
                            connections
                                := withoutEmpty({c \ {port} | c in set connections \ {foster}})
                                union {foster union {port}}),
            <POWER_IN> ->
                let
                    other_connections =
                        {c \ {port} | c in set connections & c <> {port}},
                    orphans : set of Port =
                        portsWithoutPower(ports, other_connections) union {port},
                    foster = findConnectionWithPower(ports, other_connections)
                in
                    if
                        foster = nil
                    then
                        ports(port) := <POWER_OUT>
                    else
                        atomic(
                            ports(port) := <POWER_OUT>;
                            connections
                                := withoutEmpty({c \ orphans | c in set other_connections \ {foster}})
                                union {foster union orphans}),
            <POWER_OUT> -> skip
            end
    post  ports = ports~ ++ {port |-> <POWER_OUT>};
    
    setPowerIn : Port ==> ()
    setPowerIn(port) ==
        cases ports(port):
            <OFF>, <POWER_OUT> ->
                let
                    new_connection : set of Port =
                        portsWithoutPower(ports, connections) union {port}
                in
                    atomic(
                        ports(port) := <POWER_IN>;
                        connections
                            := {cs | cs in set {c \ new_connection | c in set connections}
                                & cs <> {}}
                            union {new_connection}),
            <POWER_IN> -> skip
            end
    post  ports = ports~ ++ {port |-> <POWER_IN>};
    
    pure findConnectionWithPower : map Port to PortState * set of (set1 of Port) ==> [set1 of Port]
    findConnectionWithPower(ps, cs) ==
        let cons = connectionsWithPower(ps, cs)
        in
            if cons = {} then return nil else let c in set cons be st true in return c
    post 
        RESULT <> nil
        => RESULT in set cs and (exists p in set RESULT & ps(p) = <POWER_IN>);
functions
    connectionsWithPower : map Port to PortState * set of (set1 of Port) -> set of (set1 of Port)
    connectionsWithPower(ps, cs) ==
        {c | c in set cs & exists p in set c & ps(p) = <POWER_IN>};
    
    portsWithoutPower : map Port to PortState * set of (set1 of Port) -> set of Port
    portsWithoutPower(ps, cs) ==
        {p
            | p
            in set dunion {c | c in set cs & not (exists pi in set c & ps(pi) = <POWER_IN>)}
            & ps(p) = <POWER_OUT>};
    
    withoutEmpty : set of (set of Port) -> set of (set1 of Port)
    withoutEmpty(xss) == {xs | xs in set xss & xs <> {}};
traces
    ALL_PAIRS:
        let p1, p2 in set ALL_PORTS
        in
            let s1, s2 in set {<OFF>, <POWER_OUT>, <POWER_OUT>}
            in
                (setPort(p1, s1);
                setPort(p2, s2));
    
    ALL_TRIPLES:
        let p1, p2, p3 in set ALL_PORTS
        in
            let s1, s2, s3 in set {<OFF>, <POWER_OUT>, <POWER_OUT>}
            in
                (setPort(p1, s1);
                setPort(p2, s2);
                setPort(p3, s3));
    
    ALL_QUADS:
        let p1, p2, p3, p4 in set ALL_PORTS
        in
            let s1, s2, s3, s4 in set {<OFF>, <POWER_OUT>, <POWER_OUT>}
            in
                (setPort(p1, s1);
                setPort(p2, s2);
                setPort(p3, s3);
                setPort(p4, s4));
end SwitchBox